#import user.graphql
#import work.graphql
#import company.graphql
#import workApply.graphql
#import analyst.graphql

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")
scalar Upload
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")
"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    users: [User!]!
    user(id: ID @eq): User @find
    roles: [Role!]!
    provinces: [Province!]!
        @all(model: "HoangPhi\\VietnamMap\\Models\\Province")
    provinceDetail(id: ID! @eq): Province
        @find(model: "HoangPhi\\VietnamMap\\Models\\Province")

    me: User @auth(guard: "api")
    topCompany(amount: Int!): [Company!]!

    getAllCompany(page: Int): CompanyPaginator
    companyDetail(slug: String @eq, id: ID @eq): Company @find

    workJobHiringOfCompany(companyId: ID!): [WorkJob!]!
    workJobAppliedByUser(userId: ID!): WorkAppliedPaginator @guard
    workJobOfProvince(provinceId: ID!): WorkJobPaginator
    newWorkJob(amount: Int!): [WorkJob!]!
    getWorkJobBySlug(slug: String! @eq): WorkJob @find
    getWorkJobById(id: ID! @eq): WorkJob @find

    workCategories: [WorkCategory!]! @all
    categoryDetail(id: ID! @eq): WorkCategory @find
    workJobOfCategory(categoryId: ID!): WorkJobPaginator

    userAppliedWorkJob(user_id: ID! @eq, work_job_id: ID! @eq): UserAppliedJob
        @find(model: "App\\Models\\WorkApply")
    allCvApplied(companyId: ID, page: Int): WorkAppliedPaginator @guard
    getAllUsers(page: Int!): UserPaginator @guard
    getAllWorkJob(
        page: Int!
        input: WorkJobSearchInput @spread
    ): WorkJobPaginator

    # admin page
    analystWorkJob(companyId: ID): AnalystWorkJob @guard
    workJobByCompany(companyId: ID, page: Int): WorkJobPaginator @guard
    hrUnManage: [User!]! @guard
}

type Mutation {
    login(email: String!, password: String!): AuthPayload
    registerUser(
        email: String!
        password: String!
        firstname: String!
        lastname: String!
    ): AuthPayload
    registerUserHr(
        email: String!
        password: String!
        firstname: String!
        lastname: String!
        name: String!
        address: String!
        amount_employee: String!
    ): AuthPayload
    applyCV(content: String!, fileCV: Upload!, jobId: ID!): UploadedCV

    cancelAppliedWorkJob(workAppliedId: ID!): ResponseExecute @guard
    pauseHiring(id: ID!, is_open: Int!): ResponseExecute @guard

    createNewJob(input: WorkJobInput): ResponseExecute @guard
    updateNewJob(input: WorkJobInputUpdate): ResponseExecute @guard

    updateCompany(input: CompanyInput): ResponseExecute @guard
    removeCompany(id: ID!): ResponseExecute @guard
    createCompany(input: CompanyInput): ResponseExecute @guard

    removeUser(id: ID!): ResponseExecute @guard
    updateUser(input: UserUpdateInput): ResponseExecute @guard
    createUser(input: UserAddInput): ResponseExecute @guard
    updateProfile(input: UserProfileInput): ResponseExecute @guard

    updateWorkApply(id: ID!, status: Int): ResponseExecute
}

interface Modal {
    id: ID!
}

type Province implements Modal {
    id: ID!
    name: String
}

type ResponseExecute {
    status: String
    message: String
}
